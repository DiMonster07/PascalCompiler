using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PascalCompiler.Scaner
{
    enum tokenType { Id = 257,
                     Do,
                     If,
                     In,
                     To,
                     Of,
                     Or,
                     Mod,
                     Nil,
                     Not,
                     Set,
                     Shl,
                     Shr,
                     Var,
                     Xor,
                     Asm,
                     And,
                     For,
                     End,
                     Case,
                     Else,
                     File,
                     Goto,
                     With,
                     Then,
                     Type,
                     Until,
                     While,
                     Array,
                     Begin,
                     Break,
                     Const,
                     Label,
                     DownTo,
                     Inline,
                     Object,
                     Record,
                     Repeat,
                     Program,
                     Function,
                     Procedure,
                     
                     Add,
                     Sub,
                     Div,
                     Hat,
                     Mult,
                     Name,
                     Less,
                     Equal,
                     Great,
                     Index,
                     NotEqual,
                     LessEqual,
                     GreatEqual,
                     Assignment,

                     Dot,
                     Comma,
                     Colon,
                     Semicolon,
                     DoubleDots,
                     OpeningParenthesis,
                     ClosingParenthesis,
                     OpeningSquareBracket,
                     ClosingSquareBracket,

                     Eof,
                     Number,
                     String,
                     Delimiter,
                     Operation,           };

    static partial class Scaner
    {
        static public Dictionary<string, tokenType> delimeters = new Dictionary<string, tokenType>()
        {
            { ".",  tokenType.Dot                  },
            { ",",  tokenType.Comma                },
            { ":",  tokenType.Colon                },
            { ";",  tokenType.Semicolon            },
            { "..", tokenType.DoubleDots           },
            { "(",  tokenType.OpeningParenthesis   },
            { ")",  tokenType.ClosingParenthesis   },
            { "[",  tokenType.OpeningSquareBracket },
            { "]",  tokenType.ClosingSquareBracket },
        };

        static public Dictionary<string, tokenType> operations = new Dictionary<string, tokenType>()
        {
            { "^",  tokenType.Hat        },
            { "/",  tokenType.Div        },
            { "+",  tokenType.Add        },
            { "-",  tokenType.Sub        },
            { "*",  tokenType.Mult       },
            { "<",  tokenType.Less       },
            { "=",  tokenType.Equal      },
            { ">",  tokenType.Great      },
            { "<>", tokenType.NotEqual   },
            { "<=", tokenType.LessEqual  },
            { ">=", tokenType.GreatEqual },
            { ":=", tokenType.Assignment },
        };

        static public Dictionary<string, tokenType> keyWords = new Dictionary<string, tokenType>()
        {
            { "do",        tokenType.Do        },
            { "if",        tokenType.If        },
            { "in",        tokenType.In        },
            { "to",        tokenType.To        },
            { "of",        tokenType.Of        },
            { "or",        tokenType.Or        },
            { "mod",       tokenType.Mod       },
            { "nil",       tokenType.Nil       },
            { "not",       tokenType.Not       },
            { "set",       tokenType.Set       },
            { "shl",       tokenType.Shl       },
            { "shr",       tokenType.Shr       },
            { "var",       tokenType.Var       },
            { "xor",       tokenType.Xor       },
            { "asm",       tokenType.Asm       },
            { "and",       tokenType.And       },
            { "for",       tokenType.For       },
            { "end",       tokenType.End       },
            { "case",      tokenType.Case      },
            { "else",      tokenType.Else      },
            { "file",      tokenType.File      },
            { "goto",      tokenType.Goto      },
            { "name",      tokenType.Name      },
            { "with",      tokenType.With      },
            { "then",      tokenType.Then      },
            { "type",      tokenType.Type      },
            { "index",     tokenType.Index     },
            { "until",     tokenType.Until     },
            { "while",     tokenType.While     },
            { "array",     tokenType.Array     },
            { "begin",     tokenType.Begin     },
            { "break",     tokenType.Break     },
            { "const",     tokenType.Const     },
            { "label",     tokenType.Label     },
            { "downto",    tokenType.DownTo    },
            { "inline",    tokenType.Inline    },
            { "object",    tokenType.Object    },
            { "record",    tokenType.Record    },
            { "repeat",    tokenType.Repeat    },
            { "program",   tokenType.Program   },
            { "function",  tokenType.Function  },
            { "procedure", tokenType.Procedure },
        };
    }
}
